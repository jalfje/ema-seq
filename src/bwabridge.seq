from fixes import *
## bwabridge.seq
# Extends seq's default bwa connection with ema-specific data and functions.
# This is *extremely closely copied* from ema's bwabridge.h, just converted to seq syntax.

import math
import util
from bio.bwa import *

MEM_MAPQ_COEF: float = 30.0

class EasyAlignment:
    offset: int
    aln_end: int
    contig: str
    score: int
    read_start: int
    read_end: int
    chained_hit: mem_alnreg_t
    rev: bool
    sec: bool

    def __init__(self: EasyAlignment):
        pass

    # equivalent to bwabridge::interpret_align
    def __init__(self: EasyAlignment, ref: bwaidx_t, aln: mem_alnreg_t):
        contigs: bntseq_t = ref._bns[0]
        contig: bntann1_t = contigs._anns[aln.rid]

        if aln.rb < int(contigs._l_pac):
            self.offset = aln.rb - int(contig._offset)
            self.rev = False
        else:
            self.offset = int(contigs._l_pac) * 2 - 1 - aln.rb - int(contig._offset)
            self.rev = True

        if aln.re < int(contigs._l_pac):
            self.aln_end = aln.re - int(contig._offset)
        else:
            self.aln_end = int(contigs._l_pac) * 2 - 1 - aln.re - int(contig._offset)

        self.contig = util.c_str_to_str(contig._name)
        self.sec = aln.secondary >= 0 or aln.secondary_all > 0
        self.score = aln.score
        self.read_start = aln.qb
        self.read_end = aln.qe
        self.chained_hit = aln

class SingleReadAlignment:
    pos: int
    chrom: str
    alt: bool
    mapq: int
    edit_dist: int
    cigar: CIGAR
    alt_mappings: str
    score: int
    sub: int
    alt_score: int
    rev: bool

    def __init__(self: SingleReadAlignment):
        self.cigar = list[int]()

    # equivalent to bwabridge::interpret_single_read_alignment
    def __init__(self: SingleReadAlignment, ref: bwaidx_t, aln: mem_aln_t):
        contigs: bntseq_t = ref._bns[0]
        contig: bntann1_t = contigs._anns[aln.rid]

        self.pos = aln.pos
        self.chrom = util.c_str_to_str(contig._name)
        self.cigar = aln.cigar
        self.alt = aln.alt
        self.mapq = aln.mapq
        self.rev = aln.rev
        self.score = aln.score
        self.sub = aln.sub
        self.edit_dist = aln.NM
        self.alt_score = aln.alt_score

class EasyAlignmentPairs:
    a1: list[EasyAlignment]
    a2: list[EasyAlignment]

    def __init__(self: EasyAlignmentPairs):
        self.a1 = list[EasyAlignment]()
        self.a2 = list[EasyAlignment]()

    def __init__(self: EasyAlignmentPairs, a1: list[EasyAlignment], a2: list[EasyAlignment]):
        self.a1 = a1
        self.a2 = a2

# Copied from align::mem_approx_mapq_se_insist, which was copied (with one change)
# from bwamem::mem_approx_mapq_se
def mem_approx_mapq_se_insist(bwa: BWA, a: mem_alnreg_t):
    opts = ptr[byte](bwa.opt)
    # opts is a pointer to a mem_opt_t object
    # based on extensive testing:
    # - min_seed_len  # int(ptr[i32](ptr[byte](opts) + 16 * 4)[0])
    # - mapQ_coef_len # ptr[u32](ptr[byte](opts) + 29 * 4)[0]
    # - mapQ_coef_fac # int(ptr[i32](ptr[byte](opts) + 30 * 4)[0])
    opt_a = int(ptr[i32](opts + 0 * 4)[0])
    opt_b = int(ptr[i32](opts + 1 * 4)[0])
    opt_min_seed_len = int(ptr[i32](opts + 16 * 4)[0])
    opt_mapQ_coef_len = util.u32_to_float(ptr[u32](opts + 29 * 4)[0])
    opt_mapQ_coef_fac = int(ptr[i32](opts + 30 * 4)[0])

    sub = a.sub if a.sub != 0 else opt_min_seed_len * opt_a
    sub = max(a.csub, sub)
    if sub >= a.score:
        return 0

    l = int(max(a.qe - a.qb, a.re - a.rb))
    identity = 1.0 - float(l * opt_a - a.score) / float(opt_a + opt_b) / float(l)

    mapq: int = 0
    if a.score == 0:
        mapq = 0
    elif opt_mapQ_coef_len > 0:
        tmp = 1.0 if float(l) < opt_mapQ_coef_len else opt_mapQ_coef_fac / math.log(float(l))
        tmp *= identity * identity
        mapq = int(6.02 * (a.score - sub) / opt_a * tmp * tmp + 0.499)
    else:
        mapq = int(MEM_MAPQ_COEF * (1.0 - float(sub) / float(a.score)) * math.log(float(a.seedcov)) + 0.499)
        if identity < 0.95:
            mapq = int(mapq * identity * identity + 0.499)

    if a.sub_n > 0:
        mapq -= int(4.343 * math.log(float(a.sub_n + 1)) + 0.499)
    if mapq > 254:
        mapq = 254
    if mapq < 0:
        mapq = 0

    a_frac_rep = util.u32_to_float(a._frac_rep)
    mapq = int(float(mapq) * (1.0 - a_frac_rep) + 0.499)
    return mapq

type mem_pestat_t(_low: i32,
                  _high: i32,
                  _failed: i32,
                  _avg: float,
                  _std: float):

    @property
    def low(self: mem_pestat_t)-> int:
        return int(self._low)

    @property
    def high(self: mem_pestat_t)-> int:
        return int(self._high)

    @property
    def failed(self: mem_pestat_t)-> bool:
        return self._failed != i32(0)

    @property
    def avg(self: mem_pestat_t)-> float:
        return self._avg

    @property
    def std(self: mem_pestat_t)-> float:
        return self._std

import core.gc as gc
cimport free(ptr[byte])

_pes: ptr[mem_pestat_t] = ptr[mem_pestat_t](0)
def init_bwa_pes():
    global _pes

    NUM_PES = 4

    pes_n_bytes = NUM_PES * gc.sizeof[mem_pestat_t]()
    _pes = ptr[mem_pestat_t](gc.alloc_atomic(pes_n_bytes))

    ptr[i32](ptr[byte](_pes) + 0 * gc.sizeof[mem_pestat_t]() + 2 * 4)[0] = i32(1)
    ptr[i32](ptr[byte](_pes) + 1 * gc.sizeof[mem_pestat_t]() + 2 * 4)[0] = i32(0)
    ptr[i32](ptr[byte](_pes) + 2 * gc.sizeof[mem_pestat_t]() + 2 * 4)[0] = i32(1)
    ptr[i32](ptr[byte](_pes) + 3 * gc.sizeof[mem_pestat_t]() + 2 * 4)[0] = i32(1)

    for idx in range(4):
        ptr[i32](ptr[byte](_pes) + idx * gc.sizeof[mem_pestat_t]() + 0 * 4)[0] = i32(-35)
        ptr[i32](ptr[byte](_pes) + idx * gc.sizeof[mem_pestat_t]() + 1 * 4)[0] = i32(500)
        ptr[float](ptr[byte](_pes) + idx * gc.sizeof[mem_pestat_t]() + 3 * 4)[0] = float(200.0)
        ptr[float](ptr[byte](_pes) + idx * gc.sizeof[mem_pestat_t]() + 5 * 4)[0] = float(100.0)

# Marshals array of mem_alnreg_t objects from c-managed memory to garbage-collected memory.
# Takes a pointer to a single mem_alnreg_v item.
def _marshal_to_gc(arr: ptr[mem_alnreg_v]):
    n_bytes = arr[0].n * gc.sizeof[mem_alnreg_t]()
    copy = gc.alloc_atomic(n_bytes)
    str.memcpy(ptr[byte](copy), ptr[byte](arr[0].a), n_bytes)
    free(ptr[byte](arr[0].a))
    ptr[ptr[mem_alnreg_t]](ptr[byte](arr) + 16)[0] = ptr[mem_alnreg_t](copy)  # note offset

from BWA_LIB cimport mem_align1_core(ptr[mem_alnreg_v], cobj, cobj, ptr[bntseq_t], cobj, i32, ptr[u8], u64)
from BWA_LIB cimport mem_matesw(cobj, ptr[bntseq_t], cobj, ptr[mem_pestat_t], ptr[mem_alnreg_t], i32, ptr[u8], ptr[mem_alnreg_v]) -> i32

# Matches lookup table in BWA
_seq_convert_lookup = {s'a': u8(0), s'c': u8(1), s'g': u8(2), s't': u8(3),
                       s'A': u8(0), s'C': u8(1), s'G': u8(2), s'T': u8(3),
                       s'-': u8(5)}

def _seq_convert(read: seq)-> ptr[u8]:
    out = ptr[u8](gc.alloc_atomic(gc.sizeof[u8]() * len(read)))
    for idx, c in enumerate(read):
        out[idx] = _seq_convert_lookup.get(c, u8(4))
    return out

def bwa_mem_mate_sw(bwa: BWA, read1: seq, read2: seq, score_delta: int)-> EasyAlignmentPairs:
    global _pes

    len1 = len(read1)
    len2 = len(read2)
    read1_copy = _seq_convert(read1)
    read2_copy = _seq_convert(read2)

    results1 = mem_alnreg_v()
    results2 = mem_alnreg_v()

    NULL = u64(0)
    mem_align1_core(__ptr__(results1), bwa.opt, bwa.p[0]._bwt, bwa.p[0]._bns, bwa.p[0]._pac, i32(len1), read1_copy, NULL)
    mem_align1_core(__ptr__(results2), bwa.opt, bwa.p[0]._bwt, bwa.p[0]._bns, bwa.p[0]._pac, i32(len2), read2_copy, NULL)

    aligns1 = [EasyAlignment(bwa.p[0], results1.a[i]) for i in range(results1.n)]
    aligns2 = [EasyAlignment(bwa.p[0], results2.a[i]) for i in range(results2.n)]

    best_score1 = 0
    best_score2 = 0

    for a in aligns1:
        if a.score > best_score1:
            best_score1 = a.score
    for a in aligns2:
        if a.score > best_score2:
            best_score2 = a.score

    num = 0
    for idx in range(results2.n):
        if aligns2[idx].score >= best_score2 - score_delta:
            aln_ptr: ptr[mem_alnreg_t] = results2.a + idx
            mem_matesw(bwa.opt, bwa.p[0]._bns, bwa.p[0]._pac, _pes, aln_ptr, i32(len1), read1_copy, __ptr__(results1))
            num += 1
            if num > 50:
                break

    aligns1 = [EasyAlignment(bwa.p[0], results1.a[i]) for i in range(results1.n)]

    num = 0
    for idx in range(results1.n):
        if aligns1[idx].score >= best_score1 - score_delta:
            aln_ptr: ptr[mem_alnreg_t] = results1.a + idx
            mem_matesw(bwa.opt, bwa.p[0]._bns, bwa.p[0]._pac, _pes, aln_ptr, i32(len2), read2_copy, __ptr__(results2))
            num += 1
            if num > 50:
                break

    aligns2 = [EasyAlignment(bwa.p[0], results2.a[i]) for i in range(results2.n)]

    # Frees memory allocated by C to mem_alnreg_v::a arrays
    _marshal_to_gc(__ptr__(results1))
    _marshal_to_gc(__ptr__(results2))

    return EasyAlignmentPairs(aligns1, aligns2)


def bwa_smith_waterman(bwa: BWA, read: seq, reg: mem_alnreg_t)-> SingleReadAlignment:
    aln: mem_aln_t = bwa.reg2aln(read, reg)
    return SingleReadAlignment(bwa.p[0], aln)
