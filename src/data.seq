from fixes import *
## data.seq
# Various data class and type definitions

import math
from bwabridge import SingleReadAlignment

# Global variable for simplicity; consistent with C version. Not ideal coding practices here.
_chroms = list[str]()
def chrom_index(chrom: str)-> int:
    return _chroms.index(chrom)
def chrom_lookup(index: int)-> str:
    return _chroms[index]

# FastQRecord: Contains data for a single barcoded FASTQ record
class FastQRecord:
    barcode: int
    ident: str
    read: seq
    qual: str

    def __init__(self: FastQRecord, barcode: int, ident: str, read: seq, qual: str):
        self.barcode = barcode
        self.ident = ident
        self.read = read
        self.qual = qual

    def __init__(self: FastQRecord, barcode: int, ident: str, read: str, qual: str):
        self.barcode = barcode
        self.ident = ident
        self.read = seq(read)
        self.qual = qual


### Clouds


_cloud_id = id_generator()
class Cloud:
    exp_cov: float
    weight: float

    hi: int
    lo: int

    parent: Cloud
    child: Cloud

    ident: int
    bad: bool

    def __init__(self: Cloud):
        self.exp_cov = 0.0
        self.weight = 0.0
        self.hi = 0
        self.lo = 0
        self.parent = None
        self.child = None
        self.ident = next(_cloud_id)
        self.bad = False

def normalize_cloud_probabilities(clouds: list[Cloud]):
    # Find parent clouds, and normalize all child clouds based on that
    for cloud in clouds:
        if cloud.parent is not None:
            continue

        total = 0.0
        c = cloud
        while c is not None:
            total += c.weight
            c = c.child

        c = cloud
        while c is not None:
            c.weight /= total
            c = c.child


### SamRecord



# For scoring alignments
LOG_MATCH_SCORE: float = 0.0
LOG_MISMATCH_SCORE: float = 0.0
LOG_INDEL_SCORE: float = 0.0
LOG_CLIP_SCORE: float = 0.0
LOG10_MISMATCH_SCORE: float = 0.0
LOG10_INDEL_SCORE: float = 0.0
LOG10_CLIP_SCORE: float = 0.0
def init_alignment_score_weights(error_rate: float, indel_rate: float, clip_rate: float):
    global LOG_MATCH_SCORE
    global LOG_MISMATCH_SCORE
    global LOG_INDEL_SCORE
    global LOG_CLIP_SCORE
    global LOG10_MISMATCH_SCORE
    global LOG10_INDEL_SCORE
    global LOG10_CLIP_SCORE

    LOG_MATCH_SCORE = math.log(1.0 - error_rate)
    LOG_MISMATCH_SCORE = math.log(error_rate)
    LOG_INDEL_SCORE = math.log(indel_rate)
    LOG_CLIP_SCORE = math.log(clip_rate)
    LOG10_MISMATCH_SCORE = math.log10(error_rate)
    LOG10_INDEL_SCORE = math.log10(indel_rate)
    LOG10_CLIP_SCORE = math.log10(clip_rate)

class Alt:
    chrom: str
    pos: int
    edit_dist: int
    cigar: CIGAR
    rev: bool

    def __init__(self: Alt):
        pass

# Needed to implement this myself because Seq's native implementation is sorely lacking
class SamRecord:
    barcode: int
    chrom: int
    pos: int

    ident: str
    score: float
    mapq: int # BWA MEM's mapq
    score_mapq: int # Our computed mapq
    clip: int
    clip_edit_dist: int # Edit distance including clipping

    mate: bool
    rev: bool
    duplicate: bool
    unique: bool # Note: unused
    active: bool
    visited: bool

    gamma: float
    cloud: Cloud # pointer to cloud containing this record

    fq: FastQRecord # Pointer to read that this was from
    fq_mate: FastQRecord # Pointer to read that the mate was from

    selected_mate: SamRecord
    alignment: SingleReadAlignment
    alts: list[Alt]

    def __init__(self: SamRecord):
        self.alts = list[Alt]()

    def score_alignment(self: SamRecord, aln: SingleReadAlignment):
        matches = 0
        mismatches = 0
        indels = 0
        indels_to_count = 0
        clipping = 0

        cigar = aln.cigar
        for num, op in cigar:
            match op:
                case "M":
                    matches += num
                case "I" or "D":
                    indels += num
                    indels_to_count += 1
                case "S" or "H": # Not sure if this is exactly right, given how the cigar strings are generated
                    clipping += num
                case _:
                    assert(False)

        mismatches = aln.edit_dist - indels
        matches -= mismatches
        self.mapq = aln.mapq
        self.score = (matches * LOG_MATCH_SCORE
                    + mismatches * LOG_MISMATCH_SCORE
                    + indels_to_count * LOG_INDEL_SCORE
                    + clipping * LOG_CLIP_SCORE)
        self.score_mapq = int(60.0
                        + mismatches * LOG10_MISMATCH_SCORE
                        + indels_to_count * LOG10_INDEL_SCORE
                        + clipping * LOG10_CLIP_SCORE)

    # For bwa bridge. Equivalent to align::alignment_to_sam_rec
    def __init__(self: SamRecord, fq: FastQRecord, fq_mate: FastQRecord, aln: SingleReadAlignment,
                 mate: bool, clip: int, clip_edit_dist: int):
        self.barcode = fq.barcode
        self.chrom = chrom_index(aln.chrom)
        self.pos = aln.pos + 1

        self.ident = fq.ident[1:] # skip leading @

        self.score_alignment(aln)

        self.fq = fq
        self.fq_mate = fq_mate
        self.alignment = aln
        self.mate = mate
        self.clip = clip
        self.clip_edit_dist = clip_edit_dist

        self.rev = aln.rev
        self.unique = False
        self.duplicate = False
        self.active = True
        self.visited = False

        self.gamma = 0.0
        self.cloud = None
        self.selected_mate = None
        self.alts = list[Alt]()



    ## These have to be here due to github.com/seq-lang/seq/issues/168
    def __eq__(self: SamRecord, other: SamRecord)-> bool:
        raise NotImplementedError()
    def __lt__(self: SamRecord, other: SamRecord)-> bool:
        raise NotImplementedError()
    def __gt__(self: SamRecord, other: SamRecord)-> bool:
        raise NotImplementedError()
    def __le__(self: SamRecord, other: SamRecord)-> bool:
        raise NotImplementedError()
    def __ge__(self: SamRecord, other: SamRecord)-> bool:
        raise NotImplementedError()


def sam_record_cmp_key(record: SamRecord):
    return (record.barcode, record.chrom, record.pos, record.ident)

def sam_name_cmp_key(record: SamRecord):
    return (record.ident, record.mate)

def sam_duplicate_cmp_key(record: SamRecord):
    return (record.barcode,
            record.mate,
            record.rev,
            record.chrom,
            record.pos,
            record.selected_mate.chrom if record.selected_mate is not None else 0xFFFFFFFF,
            record.selected_mate.pos if record.selected_mate is not None else 0xFFFFFFFF)
