from fixes import *
## util.seq
# Contains various utility functions

import math
import bio.bwa as bwa

# Validate read group name
def validate_read_group(read_group: str)-> bool:
    return read_group.find("@RG\t") == 0 and read_group.find("\tID:") != -1

# Convert escape sequences to special characters in a string
def escape(s: str)-> str:
    q = str()
    i = 0
    while i < len(s):
        if s[i] == '\\':
            i += 1
            if i == len(s):
                break
            if s[i] == 't':
                q += '\t'
            elif s[i] == 'n':
                q += '\n'
            elif s[i] == 'r':
                q += '\r'
            elif s[i] == '\\':
                q += '\\'
        else:
            q += s[i]
        i += 1

    return q

# Normalize log probabilities of an array, in-place
def normalize_log_probabilities(probs: list[float]):
    epsilon = 1e-50
    n = len(probs)

    if n == 1:
        probs[0] = 1.0
        return

    thresh: float = math.log(epsilon) - math.log(float(n))
    p_max: float = max(probs)

    for idx, p in enumerate(probs):
        probs[idx] = 0.0 if p - p_max < thresh else math.exp(p - p_max)

    total: float = sum(probs)

    for idx, p in enumerate(probs):
        probs[idx] = p / total


# Yeesh. Built-in BWA bridge is sorely, sorely, sorely lacking in seq at present.
def c_str_to_str(p: ptr[byte])-> str:
    def _strlen(p: ptr[byte]):
        n = 0
        while p[n]: n += 1
        return n
    return str(p, _strlen(p))

# Writes the SAM format header to an open (and empty) file
def write_sam_header(out, ref: bwa.bwaidx_t, read_group: str, argv: list[str], version_str: str):
    # HD
    out.write("@HD\tVN:1.3\tSO:unsorted\n")

    # SQ
    n_seqs = int(ref._bns[0]._n_seqs)
    annos = [ref._bns[0]._anns[i] for i in range(n_seqs)]
    for anno in annos: # yeesh this is quite the hack
        out.write(f"@SQ\tSN:{c_str_to_str(anno._name)}\tLN:{anno._len}\n")

    # RG
    if len(read_group) != 0:
        out.write(f"{read_group}\n")

    # PG
    out.write(f"@PG\tID:ema-seq\tPN:ema-seq\tVN:{version_str}\tCL:{argv[0]}")
    for arg in argv[1:]:
        out.write(f" {arg}")
    out.write("\n")
